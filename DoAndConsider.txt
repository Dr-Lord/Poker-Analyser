---- Poker Analyser Do and Consider File
--
--      Author:
--          Dr-Lord
--
--      Version:
--          0.1 - 20-21/03/2015
--
--      Description:
--          Poker analysing shell.
--          This package contains all the things I currently have to do or
--          am considering doing. It also contains various notes and testing
--          data for the program.
--
--   Sections:
--       1 - To Do
--       2 - To Consider
--       3 - Notes
--       4 - Testing Data
--


---- 1 - TO DO -----------------------------------------------------------------

    FIX RESULT BUG IN countRoyalFlush'

    SEE THE TWO VERSIONS OF countRoyalFlush; PERHAPS MERGE THEM, SINCE THE CARD
    LISTS LIST MIGHT BE SOMETHING USERS WANT, WHILE THE OTHER ONE IS THE OPTIMAL
    WAY TO CALCULATE PROBABILITIES

    MAKE THE count FUNCTIONS TAKE IN ANY NUMBER OF CARDS, AND SCAN THE POSSIBLE
    SUBSETS WHICH CAN LEAD TO THEIR HandTypes
        PERHAPS USE subsequences (Data.List), WHICH RETURNS THE 2^X SUBSETS

    MAKE A NICE Show INSTANCE FOR Deck (OR NOT; NOT REALLY NECESSARY; IT BECOMES VERBOSE)

    REDO count FUNCTIONS WITH A Deck INPUT, EITHER AIDING OR SUBSTITUTING THE
    LONG LIST OF CARD LISTS

    PERHAPS RECONSIDER THE WHOLE CardSet INSTEAD OF [Card] RETURN TYPE OF count
    FUNCTIONS... THE LATTER SIMPLY CONTAIN MORE INFORMATION...
    BECAUSE SOME CARDS IN THE CardSet, UNLESS OF CC TYPE, WILL ALREADY BE OUT
    THEN, PERHAPS JUST USE THE CardSet VALUES TO BUILD UP THE CARD LISTS
    AND/OR IN THE END A CardSet VALUE CAN BE MAPPED DIRECTLY TO A
    PROBABILITY, SINCE IT CONTAINS THE NUMBER THAT IS REQUIRED AND THE NUMBER
    OF EXISTING THINGS MATCHING THE CRITERIA, (MORE OR LESS)
        BUT SO CAN A LIST OF LISTS OF CARDS: ANDing THE PROBS OF PICKING EACH
        CARD IN A LIST ORred WITH ALL LISTS

    FINE-TUNE THE CardSet CONSTRUCTORS, THINK ABOUT UTILITY/INUTILITY OF SOME
        IN FACT, CONSIDER NOT USING CardSet AT ALL...

    REDO THE DONE count FUNCTIONS CHOOSING A MORE APPROPRIATE CardSet VALUE
    THAN CC, AND AT THE SAME TIME, WHILE SIMPLIFYING THEM, EXTRACT PIECES OF
    CODE WHICH WILL BE USEFUL FOR THE FUNCTIONS MENTIONED IN THE FOLLOWINF TODO

    MAKE FUNCTIONS FOR CardSet ADT WHICH GENERATE CARDS LISTS FROM THEM
    MAKE FUNCTIONS FOR CardSet ADT WHICH TAKE PAIRS OF THEM AND RETURN A SINGLE
    ONE, SUCH AS intersectCS, WHICH WILL MOST LIKELY RETURN A CC OR A CN ONE

    LATER ON, WHEN USING count FUNCTIONS JUST ON THE TABLE (NOT
    INCLUDING YOUR HAND), TAKE INTO ACCOUNT WHETHER YOU HAVE SOME CARDS
    WHICH PREVENT OTHER PLAYERS FROM ACHIEVING EACH SPECIFIC HAND

    BUILD FUNCTIONS WHICH, GIVEN A SMALL SET OF CARDS (<5), RETURN WHAT OTHER
    SETS OF CARDS ARE REQUIRED IN ORDER TO OBTAIN EACH HANDTYPE;
    THEN BUILD A FUNCTION TO GET THE PROBABILITY OF DRAWING A SET OF CARDS,
    TRYING TO TAKE INTO ACCOUNT THOSE THAT ARE ALREADY OUT.
        AND/OR FUNCTIONS WHICH CALCULATE (MATHEMATICALLY) THE NUMBER OF
        POSSIBLE SINGLE HANDTYPES GIVEN A SMALL SET OF CARDS (<5) AND THEN
        RETURN THE PROBABILITY OF GETTING THEM

    TAKE INTO ACCOUNT THE DIFFERENCE BETWEEN SINGLE INSTANCES OF A HandType AND
    DISTINCT INSTANCES (THE LATTER BEING ISOMORPHOUS W.R.T. SUITS BIJECTIONS)
        (SEE WIKIPEDIA ARTICLE ON POKER PROBABILITIES)

    RECONCILE Quality AND ranks

    MAKE A FUNCTION RETURNING ALL THE HANDTYPES' PROBABILITIES FOR THE PLAYER
    AND OTHER PLAYERS SIDE BY SIDE

    GOOD SKETCH OF PROBABILITIES: https://en.wikipedia.org/wiki/Poker_probability_(Texas_hold_%27em)

    LOOK AT HAND DOMINATION

    MAKE A DEFAULT maybe FALLBACK FUNCTION FOR EACH COMMAND (LOOK AT toCard) (OR NOT)

    ATTEMPT TO BRUTE FORCE SARTING CARDS RANKS

    IN GENERAL: NEED TO IMPLEMENT CONDITIONAL PROBABILITIES (A|B) IN ORDER TO
    CATER FOR THE FACT THAT SOME CARDS THAT ARE NEEDED FOR A HAND COULD HAVE
    ALREADY BEEN EXTRACTED AND BE IN OTHER PLAYERS' HANDS. (OR NOT)



---- 2 - TO CONSIDER -----------------------------------------------------------

    PERHAPS REDO rank FUNCTIONS TO REALLY MATCH THE HANDS WITH THEIR REAL PLACE

    THINK ABOUT count FUNCTIONS, DO THEY REALLY NEED TO RETURN THE Card LISTS?
    CAN THEY NOT JUST RETURN THE NUMBER OF LISTS AND THE RANKS OF EACH?
    THEN IT DOES NOT MATTER WHAST CARDS THEY ACTUALLY CONTAIN; THEY ARE JUST
    SOME X CARDS TO BE DRAWN

    REMOVING RoundEnd Action AND SIMPLY USE THE Won ONE, PERHAPS MAKING IT A
    WonRound WITH ANOTHER WonGame ONE

    THINK ABOUT THE DIFFERENCE BETWEEN PROBABILITIES/LIKELYHOODS CALCULATED FROM
    THE SINGLE CARDS VS THOSE CALCULATED FROM HOW MANY WAYS EXIST OF ACHIEVING A
    SPECIFIC HandType (WHICH IS THE FIRST VALUE OF THE count FUNCTIONS)

    THE FACT THAT THE FIRST VALUE IN THE TUPLE RETURNED BY countANYHANDTYPE ARE
    JUST THE LENGTH OF THE SECOND VALUE... PERHAPS REMOVE IT (OR NOT, PERHAPS
    BECAUSE OF LAZYNESS IF ONLY THE FIRST ONE IS REQUIRED)?

    BRUSH UP Quick Check AND STUFF IN ORDER TO TEST ALL FUNCTIONS UP TO NOW,
    ESPECIALLY THE RANKING ONES

    SHOULD THE HandTypes IN whatIs AND bestHandType BE RETURNED
    DIRECTLY BY EACH HANDTYPE CHECKER INSTEAD OF BEING ADDED IN THESE FUNCTIONS?

    THE FACT THAT THE CARDS THAT ARE OUT ARE NOT IN, XD
    MODIFY POSSIBILITIES ACCORDING TO WHAT CARDS ARE KNOWN TO BE OUT

    INTERESTING IDEA TO START WITH:
        RANK ALL 52! HANDS 10 TIMES, ONE PER HandType. THEN CREATE A SINGLE LIST
        MERGING THEM SOMEHOW...

    FUNCTION whatProb WHICH IS GIVEN THE PRESENT CARDS AND STUFF LIKE
    Either Value Suit OR [Card] AND RETURNS THE PROBABILITY OF GETTING SUCH A
    SET FROM THE PRESENT ONES
        PERHAPS THE need FIELD IN Prob SHOULD BE OF THE TYPE OF THAT STUFF
        OR Prob SHOULD ALSO HAVE A cards FIELD LIKE Hand.

    COULD JUST BRUTE FORCE ALL POSSIBLE HANDS, SORT THEM, RANK THEM AND SAVE THE
    RESULT AS A DATA STRUCTURE TO IMPORT.
        OR DO IT SLIGHTLY MORE SMARTLY, BY GROUPING THEM.

        START BY DOING IT FOR STARTING PAIRS. VERY IMPORTANT. DO IT!!!!!!!!

    REALLY THINK ABOUT INCREMENTAL VS COMPREHENSIVE PROBABILITY DETERMINATION

    EVEN IF THE INCREMENTAL PROBABILITY ENDS UP NOT BEING IMPLEMENTED, MAKE IT
    SO THAT EVERYTHING IS FIRST CALCULATED FOR THE TABLE SO THAT PROBABILITIES
    FOR ALL PLAYERS ARE KNOWN, AND THEN APPLY IT TO THE SPECIFIC PLAYER'S HAND

    ADD AN "OR" CLAUSE IN THE need FIELD OF Prob

    CONSIDER REMOVING THE HandType VALUE FROM Hand AND Prob, AND JUST MAKE
    Data.MapS (DICTIONARIES) OF ( (HandType,Prob) AND (HandType,Hand) ) OR
    (HandType,Either Prob Hand)

    PERHAPS GROUP straightProb AND highCardProb TOGETHER

    INTRODUCE better (OR SOMETHING SIMILAR) FIELD IN Prob, REPRESENTING THE
    SMALLEST CARD REQUIRED TO GET A BETTER HAND THAN THE PRESENT.
    IT IS DIFFERENT FROM THE need FIELD, AND IT SHOULD WORK WITH IT

    INTRODUCE quality FIELD IN Prob, REPRESENTING HOW GOOD A HandType IT IS
    AMONG ALL POSSIBLE SAME HandTypes
        PERHAPS IT SHOULD BE IN Hand INSTEAD?
            AND A SAME TYPE FIELD SUCH AS "BEST POSSIBLE" COULD BE IN Prob
        REGARDLESS:
            NEED A SET OF BIJECTIONS (ONE PER HandType)
            F: HandType x |-> [0..numberOfAllPossibleShuchHandTypes-1]
                OR PERHAPS FROM 1 TO (NOT -1)
                E.G. : HighCard -> [0..13-1]

    STRUCTURING CAN BE THE FOLLOWING:
     ONE FUNCTION TAKES THE TABLE AND RETURNS Prob OF ALL HandtypeS;
     THEN THE PLAYER'S HAND IS TAKEN IN AND MAPPED OVER THE PROBABILITIES;
     EITHER STOP AT THE FIRST 100% OR DO THEM ALL (OR BE LAZY AFTER THE FIRST ONE)

    MAKE ALL THESE FUNCTIONS ASSUME THE PREVIOUS ONE HAS RUN?
    MAKE THEM WORK BY COUNTING THE CARDS THAT ARE NOT "OUT"?
    AND PERHAPS ALL POSSIBLE OTHER PLAYERS' HANDS?


    DISTINCTIVE PROPERTY OF THIS PROJECT WILL BE THE QUALITY OF HANDS:
    FROM THE SET OF ALL POSSIBLE 5 CARDS (52C5), THE 10 PARTITIONS IN DIFFERENT
    HANDTYPES WILL BE IDENTIFIED AND INDIVIDUALLY SORTED BY CREATING BIJECTIONS
    (IN FACT SIMILAR TO A fromEnum) FROM EACH OF THEM TO INTEGERS FROM 0 TO THE
    NUMBER OF ALL POSSIBLE SUCH HANDS IN ORDER.



---- 3 - NOTES -----------------------------------------------------------------

    THERE WILL BE MANY HANDS WHICH WILL BE IN MORE THAN ONE HANDTYPE

    THE ONLY HANDS WHICH WILL NEED TO BE CALCULATED EACH TIME ARE
    THE ONES THAT WOULD BEAT THE PLAYER'S OWN.

    THERE CAN BE A CRUDER VERSION OF QUALITY OF HANDS: BY NOT SORTING ALL
    SINGLE POSSIBLE ONES BUT BY GROUPING THEM BY KINDS.
    E.G. SORT FULLHOUSES BY WHAT THE TRIS IS OF AND WHAT THE PAIR IS OF.



---- 4 - TESTING DATA ----------------------------------------------------------

let h = probsToHand (sort a) (reverse $ sort b)
let prs = [Prob HighCard 1 [], Prob FullHouse 0.3 [Left Ace], Prob Straight 0.8 [Right Diamonds]]

let Just a = sequence $ map toCard ["ks", "qh", "jd", "1c", "kh", "ks", "qd"]
let Just b = sequence $ map toCard ["3h", "5c", "ks", "1s", "2d", "ah", "9d"]

let pls = [Player 1 50 10 (Fold 1) [] (Hand HighCard (HV Two) 0 []), Player 2 300 30 (Bet 2 30) [] (Hand HighCard (HV Two) 0 []), Player 3 200 50 (Raise 3 50) [] (Hand HighCard (HV Two) 0 [])]
let fr = Frame (Discard 3) 4 2 1 40 a 0 pls
let fl = [("action", FA (Fold 2)), ("dealer", FI 3)]
let ss = newFrame [fr] fl





gameShell ss

spn 5
sun 1
spb 500
s0d
ci ks qh
p2b 5
p3b 10
p4f
p5f
p1b 10
p2b 5
cf jd ah 1c
p2c jc kd
p3c kh qd

fff
re

