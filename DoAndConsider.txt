---- Poker Analyser Do and Consider File
--
--      Author:
--          Dr-Lord
--
--      Version:
--          0.1 - 20-21/03/2015
--
--      Description:
--          Poker analysing shell.
--          This package contains all the things I currently have to do or
--          am considering doing. It also contains various notes and testing
--          data for the program.
--
--   Sections:
--       1 - To Do
--       2 - To Consider
--       3 - Notes
--       4 - Testing Data
--


---- 1 - TO DO -----------------------------------------------------------------

    PARALLELISE STUFF
        DETERMINE WHICH MODULE IS THE MOST PERTINENT IN EACH CASE:
            Control.Parallel (JUST par AND pseq)
            Control.Parallel.Strategies (CONTAINS THE Deepseq STUFF, INCLUDING
                INSTANCE DERIVATION (WHICH IS NOT THE SAME AS DERIVABLE))

    MAKE FUNCTIONS (OR IMPLEMENT IN THE ABSTRACTED PART OF THE count ONES) RANKING
    THE BEST AND WORST INSTANCES IN A count

    MAKE A FUNCTION (USING totHtProb) WHICH TAKES THE RESULT OF countHandTypes
    AND RETURNS A SINGLE PROBABILITY PER HandType PER TARGET CARDS NUMBER

    DO SOMETHING WITH THE Deck TYPE; USE IT IN THE count FUNCTIONS
    IF IT IS NOT USED, REMOVE IT ALTOGETHER BUT LEAVE THE # OF CARDS IN IT
        OR MENTION THAT IT MAKES MUCH MORE SENSE IF CARDS ARE NOT PUT BACK INTO IT

    IMPLEMENT ALL CHECKS FOR NON ALLOWED ACTIONS AND CARDS IN THE SHELL, ESPECIALLY
    HAVING THE SAME CARD TWICE, WHICH BREAKS MOST count FUNCTIONS

    REALLY CONSIDER JUST BULDING A DUMMED DOWN VERSION OF HandType CHEKERS (Bool OUTPUT)
    TO UNIFY THE WAY THEY ARE CHECKED, SACRIFICING SOME SPEED
        OR, JUST GENERALISE THE noSOMEHANDTYPE FUNCTIONS AND CALL THEM WHERE NEEDED

        AAAAAND: RETOUCH THE FINAL ASSEMBLING FUNCTION BY PERFORMING THE SAME GENERAL TESTS TO
            DETERMINE WHICH count FUNCTIONS WOULD JUST RETURN [], THEREBY SAVING PRECIOUS TIME

    GO OVER ALL count FUNCTIONS AND MAKE SURE THAT:
        - MAKE SURE THAT WHILE DOING THESE STEPS NO INSTANCES ARE WRONGLY REMOVED BY
            TOO BROAD A REMOVAL SPECTRUM IN SOME FUNCTION
        - IF A HandType IS ALREADY PRESENT A PROBABILITY OF 1 IS RETURNED (PERHAPS REMOVE
            THE NULL LISTS REMOVAL IN THE GENERAL COUNTING FUNCTION) AND
            ALSO ONLY THE BETTER ONES OF THE SAME KIND (IF THEY ARE POSSIBLE (NOT ALWAYS))
            OR THE USER COULD ASK FOR THE BETTER INSTANCES OF THE SAME HandType SEPARATELY?
        - INSTANCES OF BETTER HandTypes ARE NEVER RETURNED
            - CONSIDER DOING IT MORE ABSTRACTLY WITH CHECKERS FOR ALL OR JUST THE
                COMPLICATED ONES
            - SINCE THEY ARE DONE NOW, CONSIDER, INSTEAD, EXTENDING THE TESTS IN
                countHighCard TO OTHER count FUNCTIONS
            - CHECK WITH RANDOMLY GENERATED HANDS ON checkBetter
            - USE QuickCheck!!!!!!!!!!!!!!!!!!!!

        SHORT VERSION:
            - NO DIFFERENT HandType INSTANCES RETURNED
            - PROB OF 1 FOR ALREADY PRESENT INSTANCES
                - RETURN BETTER INSTANCES AND NOT WORTH SAME BUT DIFFERENT OR WORSE
            - NO WRONGLY REMOVED INSTANCES

            STATUS WORKING UP FROM LOWEST HandType:
                DONE countThreeOfAKind
                    REDO countStraight BY SELECTING THE Straight Values LISTS WHICH
                    NEED FEWER THAN THE CARDS LEFT TO DRAW CARDS TO BE COMPLETED
                    AND COMPLETING THEM, AVOIDING SOME EXPENSIVE EXTRA FILTERS
                        ALSO, TAKE CARE NOT TO GET CASES OF SUPER DIFFERENT BUT
                        WORTH THE SAME INSTANCES, AS IN HAVING 4,6,7,8 AND GETTING
                        AMONG THE completers 4,5,6,7,8 AND 3,4,5,6,7,8

                            FINISH DOING!!!!!!!!!!!!!!!!!!!!!!!!



            BE AWARE, WHEN LATER DECIDING ON HOW TO USE THE PROBABILITIES (SINGLE
            BY SINGLE OR ALSO INCLUDING THE TOTAL NUMBER OF INSTANCES), THAT BY
            REMOVING THE INSTANCES WHICH ARE ALSO BETTER INSTANCES, SOME INSTANCES
            HAVE BEEN REMOVED, THEREFORE THE COLLECTIVE PROBABILITY BASED ONLY ON
            THE NUMBER OF INSTANCES HAS BEEN AFFECTED

    DECIDE WHAT LEVEL OF ABSTRACTION SHOULD BE EXTRACTED FROM THE ALREADY MADE
    count FUNCTIONS: JUST THE WHOLE possHands PART? THE WHOLE STRUCTURE?

    TAKE INTO ACCOUNT THE DIFFERENCE BETWEEN SINGLE INSTANCES OF A HandType AND
    DISTINCT INSTANCES (THE LATTER BEING ISOMORPHOUS W.R.T. SUITS BIJECTIONS)
        (SEE WIKIPEDIA ARTICLE ON POKER PROBABILITIES)

    RECONCILE Quality AND ranks

    MAKE A FUNCTION RETURNING ALL THE HANDTYPES' PROBABILITIES FOR THE PLAYER
    AND OTHER PLAYERS SIDE BY SIDE

    FINAL TEST AT THE VERY END: COMPARE WITH RESULTS FROM: http://poker-helper.co.uk/
    GOOD SKETCH OF PROBABILITIES: https://en.wikipedia.org/wiki/Poker_probability_(Texas_hold_%27em)

    LOOK AT HAND DOMINATION

    MAKE A DEFAULT maybe FALLBACK FUNCTION FOR EACH COMMAND (LOOK AT toCard) (OR NOT)

    ATTEMPT TO BRUTE FORCE SARTING CARDS RANKS

    IN GENERAL: NEED TO IMPLEMENT CONDITIONAL PROBABILITIES (A|B) IN ORDER TO
    CATER FOR THE FACT THAT SOME CARDS THAT ARE NEEDED FOR A HAND COULD HAVE
    ALREADY BEEN EXTRACTED AND BE IN OTHER PLAYERS' HANDS. (OR NOT)



---- 2 - TO CONSIDER -----------------------------------------------------------

    REVISING THE GENERAL NOMENCLATURE TO MAKE IT VERY POKER-LEXICON-LIKE
    (E.G. THE PLAYER'S CARDS ARE CALLED POCKET CARDS, ETC.)

    FLIPPING THE FIRST TWO ARGUMENTS OF count FUNCTION (SEPARATE THE TWO [Card]
    WITH THE Deck, JUST FOR MORE CLARITY)

    PERHAPS REDO rank FUNCTIONS TO REALLY MATCH THE HANDS WITH THEIR REAL PLACE

    THINK ABOUT count FUNCTIONS, DO THEY REALLY NEED TO RETURN THE Card LISTS?
    CAN THEY NOT JUST RETURN THE NUMBER OF LISTS AND THE RANKS OF EACH?
    THEN IT DOES NOT MATTER WHAST CARDS THEY ACTUALLY CONTAIN; THEY ARE JUST
    SOME X CARDS TO BE DRAWN

    REMOVING RoundEnd Action AND SIMPLY USE THE Won ONE, PERHAPS MAKING IT A
    WonRound WITH ANOTHER WonGame ONE

    THINK ABOUT THE DIFFERENCE BETWEEN PROBABILITIES/LIKELYHOODS CALCULATED FROM
    THE SINGLE CARDS VS THOSE CALCULATED FROM HOW MANY WAYS EXIST OF ACHIEVING A
    SPECIFIC HandType (WHICH IS THE FIRST VALUE OF THE count FUNCTIONS)

    THE FACT THAT THE FIRST VALUE IN THE TUPLE RETURNED BY countANYHANDTYPE ARE
    JUST THE LENGTH OF THE SECOND VALUE... PERHAPS REMOVE IT (OR NOT, PERHAPS
    BECAUSE OF LAZYNESS IF ONLY THE FIRST ONE IS REQUIRED)?

    BRUSH UP Quick Check AND STUFF IN ORDER TO TEST ALL FUNCTIONS UP TO NOW,
    ESPECIALLY THE RANKING ONES

    SHOULD THE HandTypes IN whatIs AND bestHandType BE RETURNED
    DIRECTLY BY EACH HANDTYPE CHECKER INSTEAD OF BEING ADDED IN THESE FUNCTIONS?

    THE FACT THAT THE CARDS THAT ARE OUT ARE NOT IN, XD
    MODIFY POSSIBILITIES ACCORDING TO WHAT CARDS ARE KNOWN TO BE OUT

    INTERESTING IDEA TO START WITH:
        RANK ALL 52! HANDS 10 TIMES, ONE PER HandType. THEN CREATE A SINGLE LIST
        MERGING THEM SOMEHOW...

    FUNCTION whatProb WHICH IS GIVEN THE PRESENT CARDS AND STUFF LIKE
    Either Value Suit OR [Card] AND RETURNS THE PROBABILITY OF GETTING SUCH A
    SET FROM THE PRESENT ONES
        PERHAPS THE need FIELD IN Prob SHOULD BE OF THE TYPE OF THAT STUFF
        OR Prob SHOULD ALSO HAVE A cards FIELD LIKE Hand.

    COULD JUST BRUTE FORCE ALL POSSIBLE HANDS, SORT THEM, RANK THEM AND SAVE THE
    RESULT AS A DATA STRUCTURE TO IMPORT.
        OR DO IT SLIGHTLY MORE SMARTLY, BY GROUPING THEM.

        START BY DOING IT FOR STARTING PAIRS. VERY IMPORTANT. DO IT!!!!!!!!

    REALLY THINK ABOUT INCREMENTAL VS COMPREHENSIVE PROBABILITY DETERMINATION

    EVEN IF THE INCREMENTAL PROBABILITY ENDS UP NOT BEING IMPLEMENTED, MAKE IT
    SO THAT EVERYTHING IS FIRST CALCULATED FOR THE TABLE SO THAT PROBABILITIES
    FOR ALL PLAYERS ARE KNOWN, AND THEN APPLY IT TO THE SPECIFIC PLAYER'S HAND

    ADD AN "OR" CLAUSE IN THE need FIELD OF Prob

    CONSIDER REMOVING THE HandType VALUE FROM Hand AND Prob, AND JUST MAKE
    Data.MapS (DICTIONARIES) OF ( (HandType,Prob) AND (HandType,Hand) ) OR
    (HandType,Either Prob Hand)

    PERHAPS GROUP straightProb AND highCardProb TOGETHER

    INTRODUCE better (OR SOMETHING SIMILAR) FIELD IN Prob, REPRESENTING THE
    SMALLEST CARD REQUIRED TO GET A BETTER HAND THAN THE PRESENT.
    IT IS DIFFERENT FROM THE need FIELD, AND IT SHOULD WORK WITH IT

    INTRODUCE quality FIELD IN Prob, REPRESENTING HOW GOOD A HandType IT IS
    AMONG ALL POSSIBLE SAME HandTypes
        PERHAPS IT SHOULD BE IN Hand INSTEAD?
            AND A SAME TYPE FIELD SUCH AS "BEST POSSIBLE" COULD BE IN Prob
        REGARDLESS:
            NEED A SET OF BIJECTIONS (ONE PER HandType)
            F: HandType x |-> [0..numberOfAllPossibleShuchHandTypes-1]
                OR PERHAPS FROM 1 TO (NOT -1)
                E.G. : HighCard -> [0..13-1]

    STRUCTURING CAN BE THE FOLLOWING:
     ONE FUNCTION TAKES THE TABLE AND RETURNS Prob OF ALL HandtypeS;
     THEN THE PLAYER'S HAND IS TAKEN IN AND MAPPED OVER THE PROBABILITIES;
     EITHER STOP AT THE FIRST 100% OR DO THEM ALL (OR BE LAZY AFTER THE FIRST ONE)

    MAKE ALL THESE FUNCTIONS ASSUME THE PREVIOUS ONE HAS RUN?
    MAKE THEM WORK BY COUNTING THE CARDS THAT ARE NOT "OUT"?
    AND PERHAPS ALL POSSIBLE OTHER PLAYERS' HANDS?


    DISTINCTIVE PROPERTY OF THIS PROJECT WILL BE THE QUALITY OF HANDS:
    FROM THE SET OF ALL POSSIBLE 5 CARDS (52C5), THE 10 PARTITIONS IN DIFFERENT
    HANDTYPES WILL BE IDENTIFIED AND INDIVIDUALLY SORTED BY CREATING BIJECTIONS
    (IN FACT SIMILAR TO A fromEnum) FROM EACH OF THEM TO INTEGERS FROM 0 TO THE
    NUMBER OF ALL POSSIBLE SUCH HANDS IN ORDER.



---- 3 - NOTES -----------------------------------------------------------------

    THERE WILL BE MANY HANDS WHICH WILL BE IN MORE THAN ONE HANDTYPE

    THE ONLY HANDS WHICH WILL NEED TO BE CALCULATED EACH TIME ARE
    THE ONES THAT WOULD BEAT THE PLAYER'S OWN.

    THERE CAN BE A CRUDER VERSION OF QUALITY OF HANDS: BY NOT SORTING ALL
    SINGLE POSSIBLE ONES BUT BY GROUPING THEM BY KINDS.
    E.G. SORT FULLHOUSES BY WHAT THE TRIS IS OF AND WHAT THE PAIR IS OF.



---- 4 - TESTING DATA ----------------------------------------------------------

let h = probsToHand (sort a) (reverse $ sort b)
let prs = [Prob HighCard 1 [], Prob FullHouse 0.3 [Left Ace], Prob Straight 0.8 [Right Diamonds]]

let Just a = sequence $ map toCard ["ks", "qh", "jd", "1c", "kh", "ks", "qd"]
let Just b = sequence $ map toCard ["3h", "5c", "ks", "1s", "2d", "ah", "9d"]

let pls = [Player 1 50 10 (Fold 1) [] (Hand HighCard (HV Two) 0 []), Player 2 300 30 (Bet 2 30) [] (Hand HighCard (HV Two) 0 []), Player 3 200 50 (Raise 3 50) [] (Hand HighCard (HV Two) 0 [])]
let fr = Frame (Discard 3) 4 2 1 40 a 0 pls
let fl = [("action", FA (Fold 2)), ("dealer", FI 3)]
let ss = newFrame [fr] fl



let Just a = sequence $ map toCard ["ks", "qh"]
let Just b = sequence $ map toCard ["3h"]
countHighCard initialDeck b a




gameShell ss

spn 5
sun 1
spb 500
s0d
ci ks qh
p2b 5
p3b 10
p4f
p5f
p1b 10
p2b 5
cf jd ah 1c
p2c jc kd
p3c kh qd

fff
re

